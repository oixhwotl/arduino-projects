#include <DHT.h>
#include <LiquidCrystal_I2C.h>

/* ARCH and PIN SETTINGS BEGIN */
#define USE_ARDUINO   0
#define USE_ESP       1

#if USE_ARDUINO

#define PIN_DHT       3     // Digital pin connected to the DHT sensor

#define DHT_TYPE      DHT11   // DHT 11

#define DO_LCD_TEST   1
#define LCD_ADDR      0x27

#define PIN_CDS       12    // Photoresistor

#define PIN_LED_ENA   5   // Mortor Driver ENA
#define PIN_LED_IN1   6   // Mortor Driver IN1
#define PIN_LED_IN2   7   // Mortor Driver IN2

#define PIN_SOIL      A0

#define PIN_MOTOR_ENB 10
#define PIN_MOTOR_IN3 9
#define PIN_MOTOR_IN4 8

#else // USE_ESP32

#define analogWrite dacWrite

#define LED_BUILTIN 2

#define PIN_DHT     4
#define DHT_TYPE      DHT11   // DHT 11

#define DO_LCD_TEST   1
#define LCD_ADDR      0x27

#define PIN_CDS       35    // Photoresistor

#define PIN_LED_ENA   26   // Mortor Driver ENA
#define PIN_LED_IN1   27   // Mortor Driver IN1
#define PIN_LED_IN2   14   // Mortor Driver IN2

#define PIN_SOIL      34

#define PIN_MOTOR_ENB 25
#define PIN_MOTOR_IN3 33
#define PIN_MOTOR_IN4 32

#endif // USE_ARDUINO
/* ARCH and PIN SETTINGS END */


#define SERIAL_BAUD_RATE 9600

#define USE_DHT       0
#define USE_LCD       1
#define USE_CDS       1
#define USE_LED       1
#define USE_SOIL      1
#define USE_MOTOR     1

#define SOIL_DRY_START_MOTOR 3000
#define USE_CDS_FOR_LED 0
#define USE_SOIL_FOR_MOTOR 0

#define DHT_UPDATE_INTERVAL 5000
#define CDS_UPDATE_INTERVAL 5000
#define SOIL_UPDATE_INTERVAL 5000
#define SERIAL_UPDATE_INTERVAL 5000
#define LCD_UPDATE_INTERVAL 5000
#define LED_UPDATE_INTERVAL 5000
#define MOTOR_UPDATE_INTERVAL 5000

#if USE_DHT
DHT dht(PIN_DHT, DHT_TYPE);
#endif

#if USE_LCD
LiquidCrystal_I2C mylcd(LCD_ADDR, 16, 2);
#endif


#define USE_BLYNK       1

#if USE_BLYNK
#define BLYNK_PRINT Serial

#define BLYNK_TEMPLATE_ID "TMPL6LW2UWyYg"
#define BLYNK_TEMPLATE_NAME "SmartFarm"
#define BLYNK_AUTH_TOKEN "uDOpPOGDkWMrBbCutnSv20zXkJ98KZuU"

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

char ssid[] = "MS2_11ng";
char pass[] = "";

BlynkTimer timer;
#endif // USE_BLYNK

struct status{
  // uptime
  unsigned long now = 0;

  // SERIAL
  unsigned long serial_last_update = 0;
  int serial_update_interval = SERIAL_UPDATE_INTERVAL;

  // ARDUINO?
  int use_arduino = USE_ARDUINO;

  // DHT
  int use_dht = USE_DHT;
  unsigned long dht_last_check = 0;
  int dht_update_interval = DHT_UPDATE_INTERVAL;

  float humidity = 0.0;
  float temperature = 0.0;
  float heatIndex = 0.0;

  String humiStr;
  String tempStr;
  String hicStr;

  // CDS
  int use_cds = USE_CDS;
  unsigned long cds_last_check = 0;
  int cds_update_interval = CDS_UPDATE_INTERVAL;

  int cdsLight = 0; // light
  String cdsLightStr;

  // LCD
  int use_lcd = USE_LCD;
  unsigned long lcd_last_update = 0;
  int lcd_update_interval = LCD_UPDATE_INTERVAL;

  String lcdLine1 = "Hello World!";
  String lcdLine2 = "Welcome SmartFarm!";

  // SOIL
  int use_soil = USE_SOIL;
  unsigned long soil_last_check = 0;
  int soil_update_interval = SOIL_UPDATE_INTERVAL;

  int soil = 0;
  String soilStr;

  // LED
  int use_led = USE_LED;
  unsigned long led_last_update = 0;
  int led_update_interval = LED_UPDATE_INTERVAL;
  int led;

  // LEDBUILTIN
  unsigned long ledbuiltin_last_update = 0;
  int ledbuiltin_update_interval = LED_UPDATE_INTERVAL;
  int ledbuiltin = 0;

  // MOTOR
  int use_motor = USE_MOTOR;
  unsigned long motor_last_udpate = 0;
  int motor_update_interval = MOTOR_UPDATE_INTERVAL;
  int motor = 0;
  String motorStr;

} g_status;


void setup_ledbuiltin() {
  pinMode(LED_BUILTIN, OUTPUT);
  g_status.ledbuiltin = 0;
}

void ledbuiltin_turn_on() {
  digitalWrite(LED_BUILTIN, HIGH);
  g_status.ledbuiltin = 1;
  g_status.ledbuiltin_last_update = g_status.now;
}

void ledbuiltin_turn_off() {
    digitalWrite(LED_BUILTIN, LOW);
    g_status.ledbuiltin = 0;
    g_status.ledbuiltin_last_update = g_status.now;
}

void setup() {
  Serial.begin(SERIAL_BAUD_RATE);
  Serial.println(F("\nLet's build a smart farm!"));

  process_now();

  setup_led();
  setup_ledbuiltin();
  setup_motor();

  setup_dht();
  setup_lcd();
  setup_cds();
  setup_soil();

  setup_blynk();
}

void setup_dht() {
  #if USE_DHT
  dht.begin();        // Initialize DHT sensor

  g_status.temperature = 0;
  g_status.humidity = 0;
  g_status.heatIndex = 0;
  #endif
}

void setup_lcd() {
  #if USE_LCD
  
  #if DO_LCD_TEST
  lcd_test_setup();   // Test LCD port number, which is 0x27
  lcd_test();
  #endif

  mylcd.init();       // Initialize LCD
  mylcd.backlight();  // Turn on the backlight of LCD
  mylcd.clear();      // Clear the LCD

  mylcd.setCursor(1, 0);
  mylcd.print(g_status.lcdLine1);
  mylcd.setCursor(1, 1);
  mylcd.print(g_status.lcdLine2);
  #endif
}

void setup_led() {
  #if USE_LED
  pinMode(PIN_LED_ENA, OUTPUT);
  pinMode(PIN_LED_IN1, OUTPUT);
  pinMode(PIN_LED_IN2, OUTPUT);
  #endif
}

void setup_cds() {
  #if USE_CDS
  pinMode(PIN_CDS, INPUT);  // Initialize CDS

  g_status.cdsLight = 0;
  #endif
}

void setup_soil() {
  #if USE_SOIL
  pinMode(PIN_SOIL, INPUT);

  g_status.soil = 0;
  #endif
}

void setup_motor() {
  #if USE_MOTOR
  pinMode(PIN_MOTOR_ENB, OUTPUT);
  pinMode(PIN_MOTOR_IN3, OUTPUT);
  pinMode(PIN_MOTOR_IN4, OUTPUT);
  #endif
}

#if USE_BLYNK
BLYNK_WRITE(V1)
{
  int pinValue = param.asInt(); // assigning incoming value from pin V1 to a variable
  
  if (pinValue == 1) {
    if (g_status.led == 0) {
      led_turn_on();
      ledbuiltin_turn_on();
    }
  } else {
    if (g_status.led > 0) {
      led_turn_off();
      ledbuiltin_turn_off();
    }
  }
}

BLYNK_WRITE(V2)
{
  int pinValue = param.asInt(); // assigning incoming value from pin V1 to a variable
  
  if (pinValue == 1) {
    if (g_status.motor == 0) {
      motor_turn_on();
    }
  } else {
    if (g_status.motor > 0) {
      motor_turn_off();
    }
  }
}
#endif // USE_BLYNK

void blynk_update() {
  #if USE_BLYNK
  // V1 LED
  // V2 PUMP
  // V3 Temperature
  // V4 Humidity
  #if USE_DHT
  Blynk.virtualWrite(V3, (int)g_status.temperature);
  Blynk.virtualWrite(V4, (int)g_status.humidity);
  #endif // USE_DHT

  #if USE_LED
  Blynk.virtualWrite(V1, g_status.led > 0);
  #endif // USE_LED

  #if USE_MOTOR
  Blynk.virtualWrite(V2, g_status.motor > 0);
  #endif // USE_MOTOR

  #endif
}

void setup_blynk() {
  #if USE_BLYNK
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  timer.setInterval(1000L, blynk_update);
  #endif
}

void loop() {
  process_now();

  process_dht();
  process_cds();
  process_soil();

  process_lcd();
  process_serial();

  process_blynk();
}

void process_now() {
  g_status.now = millis();
}

void process_dht() {
  if (g_status.now - g_status.dht_last_check < g_status.dht_update_interval) {
    return;
  } else {
    g_status.dht_last_check = g_status.now;
  }

  #if USE_DHT
  // DHT
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  float hic = dht.computeHeatIndex(t, h, false);

  String tempStr = "Temp: " + String(t) + "'C";
  String humiStr = "Humi: " + String(h) + " %";
  String hicStr = "HI: " + String(hic) + " Â°C";

  g_status.temperature = t;
  g_status.humidity = h;
  g_status.heatIndex = hic;
  g_status.tempStr = tempStr;
  g_status.humiStr = humiStr;
  g_status.hicStr = hicStr;

  String lcdStr = String(t) + " " + String(h) + " " + String(hic);
  g_status.lcdLine1 = lcdStr;
  #endif
}

void process_lcd() {
  #if USE_LCD
  
  if (g_status.now - g_status.lcd_last_update < g_status.lcd_update_interval) {
    return;
  } else {
    g_status.lcd_last_update = g_status.now;
  }

  mylcd.clear();
  mylcd.setCursor(1, 0);
  mylcd.print(g_status.lcdLine1);
  mylcd.setCursor(1, 1);
  mylcd.print(g_status.lcdLine2);
  #endif
}

void process_serial() {
  if (g_status.now - g_status.serial_last_update < g_status.serial_update_interval) {
    return;
  } else {
    g_status.serial_last_update = g_status.now;
  }

  int checking = 0;

  #if USE_DHT
  checking++;
  Serial.print(g_status.tempStr);
  Serial.print(", ");
  Serial.print(g_status.humiStr);
  Serial.print(", ");
  Serial.print(g_status.hicStr);
  Serial.print(", ");
  #endif

  #if USE_CDS
  checking++;
  Serial.print(g_status.cdsLightStr);
  Serial.print(", ");
  #endif

  #if USE_SOIL
  checking++;
  Serial.print(g_status.soilStr);
  Serial.print(", ");
  #endif

  #if USE_MOTOR
  checking++;
  Serial.print(g_status.motorStr);
  Serial.print(", ");
  #endif

  if (checking == 0) {
    Serial.println("Tick!");
  } else {
    Serial.println("");
  }
}

void process_cds() {
  #if USE_CDS
  if (g_status.now - g_status.cds_last_check < g_status.cds_update_interval) {
    return;
  } else {
    g_status.cds_last_check = g_status.now;
  }

  // CDS Photoresistor
  int cdsLight = digitalRead(PIN_CDS);
  String cdsLightStr = "Light: " + String(cdsLight) + (cdsLight == 1? " OFF" : " ON");

  g_status.cdsLight = cdsLight;
  g_status.cdsLightStr = cdsLightStr;

  #if USE_LED
  #if USE_CDS_FOR_LED
  if (cdsLight == HIGH) { // Light: 1 OFF
    led_turn_on();
  } else {
    led_turn_off();
  }
  #endif // USE_CDS_FOR_LED
  #endif  // USE_LED

  #endif  // USE_CDS
}

void led_set(int led, int in1, int in2) {
  #if USE_LED

  if (g_status.now - g_status.led_last_update < g_status.led_update_interval) {
    return;
  } else {
    g_status.led_last_update = g_status.now;
  }

  analogWrite(PIN_LED_ENA, led);      // led strength 0 off
  digitalWrite(PIN_LED_IN1, in1);   // LOW -> LOW, no action
  digitalWrite(PIN_LED_IN2, in2);

  g_status.led = led;
  #endif
}

void led_turn_on() {
  #if USE_LED
  led_set(255, HIGH, LOW);
  #endif
}

void led_turn_off() {
  #if USE_LED
  led_set(0, LOW, LOW);
  #endif
}

void process_soil() {
  #if USE_SOIL
  if (g_status.now - g_status.soil_last_check < g_status.soil_update_interval) {
    return;
  } else {
    g_status.soil_last_check = g_status.now;
  }

  int soil = analogRead(PIN_SOIL);
  float soilPerCent = (1024.0 - (double)soil) / 1024.0 * 100.0;

  String soilStr = "S: " + String(soil) + ", " + String(soilPerCent);

  g_status.soil = soil;
  g_status.soilStr = soilStr;
  g_status.lcdLine2 = soilStr;

  #if USE_SOIL_FOR_MOTOR
  if (g_status.soil > SOIL_DRY_START_MOTOR) {
    motor_turn_on();
  } else {
    motor_turn_off();
  }
  #endif
  #endif
}

void motor_set(int motor, int in3, int in4) {
  #if USE_MOTOR
  analogWrite(PIN_MOTOR_ENB, motor);
  digitalWrite(PIN_MOTOR_IN3, in3);
  digitalWrite(PIN_MOTOR_IN4, in4);

  g_status.motor = motor;
  g_status.motorStr = "M: " + String(motor) + " " + (in3 == HIGH ? "HIGH" : "LOW") + " " + (in4 == HIGH ? "HIGH" : "LOW");
  #endif
}

void motor_turn_on() {
  #if USE_MOTOR
  motor_set(255, HIGH, LOW);
  #endif
}

void motor_turn_off() {
  #if USE_MOTOR
  motor_set(0, LOW, LOW);
  #endif
}

void process_blynk() {
  Blynk.run();
  timer.run();
}